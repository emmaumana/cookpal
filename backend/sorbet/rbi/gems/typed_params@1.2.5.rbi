# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `typed_params` gem.
# Please instead update this file by running `bin/tapioca gem typed_params`.


# source://typed_params//lib/typed_params/mapper.rb#3
module TypedParams
  class << self
    # source://typed_params//lib/typed_params.rb#85
    def config; end

    # @yield [config]
    #
    # source://typed_params//lib/typed_params.rb#86
    def configure; end

    # source://typed_params//lib/typed_params.rb#82
    def formats; end

    # source://typed_params//lib/typed_params.rb#83
    def types; end
  end
end

# Sentinel value for determining if something should be automatic.
# For example, automatically detecting a param's format via its
# schema vs using an explicitly provided format.
#
# source://typed_params//lib/typed_params.rb#53
TypedParams::AUTO = T.let(T.unsafe(nil), Object)

# source://typed_params//lib/typed_params/bouncer.rb#6
class TypedParams::Bouncer < ::TypedParams::Mapper
  # source://typed_params//lib/typed_params/bouncer.rb#7
  def call(params); end
end

# source://typed_params//lib/typed_params/coercer.rb#6
class TypedParams::Coercer < ::TypedParams::Mapper
  # source://typed_params//lib/typed_params/coercer.rb#7
  def call(params); end
end

# source://typed_params//lib/typed_params.rb#62
class TypedParams::CoercionError < ::StandardError; end

# source://typed_params//lib/typed_params/configuration.rb#4
class TypedParams::Configuration
  include ::ActiveSupport::Configurable
  extend ::ActiveSupport::Configurable::ClassMethods

  # ignore_nil_optionals defines how nil optionals are handled.
  # When enabled, optional params that are nil will be dropped
  # given the schema does not allow_nil. Essentially, they
  # will be treated as if they weren't provided.
  #
  # source://activesupport/7.2.1/lib/active_support/configurable.rb#115
  def ignore_nil_optionals; end

  # source://activesupport/7.2.1/lib/active_support/configurable.rb#116
  def ignore_nil_optionals=(value); end

  # key_transform defines the casing for parameter keys.
  #
  # One of:
  #
  #   - :underscore
  #   - :camel
  #   - :lower_camel
  #   - :dash
  #   - nil
  #
  # source://activesupport/7.2.1/lib/active_support/configurable.rb#115
  def key_transform; end

  # source://activesupport/7.2.1/lib/active_support/configurable.rb#116
  def key_transform=(value); end

  # path_transform defines the casing for parameter paths.
  #
  # One of:
  #
  #   - :underscore
  #   - :camel
  #   - :lower_camel
  #   - :dash
  #   - nil
  #
  # source://activesupport/7.2.1/lib/active_support/configurable.rb#115
  def path_transform; end

  # source://activesupport/7.2.1/lib/active_support/configurable.rb#116
  def path_transform=(value); end

  class << self
    # source://activesupport/7.2.1/lib/active_support/configurable.rb#115
    def ignore_nil_optionals; end

    # source://activesupport/7.2.1/lib/active_support/configurable.rb#116
    def ignore_nil_optionals=(value); end

    # source://activesupport/7.2.1/lib/active_support/configurable.rb#115
    def key_transform; end

    # source://activesupport/7.2.1/lib/active_support/configurable.rb#116
    def key_transform=(value); end

    # source://activesupport/7.2.1/lib/active_support/configurable.rb#115
    def path_transform; end

    # source://activesupport/7.2.1/lib/active_support/configurable.rb#116
    def path_transform=(value); end
  end
end

# source://typed_params//lib/typed_params/controller.rb#9
module TypedParams::Controller
  extend ::ActiveSupport::Concern
  include ::TypedParams::Memoize

  class << self
    # @private
    # @raise [ArgumentError]
    #
    # source://typed_params//lib/typed_params/controller.rb#188
    def included(klass); end
  end
end

# source://typed_params//lib/typed_params/controller.rb#0
module TypedParams::Controller::ClassMethods
  # source://typed_params//lib/typed_params/controller.rb#115
  def typed_params(on: T.unsafe(nil), schema: T.unsafe(nil), format: T.unsafe(nil), **kwargs, &_arg4); end

  # source://typed_params//lib/typed_params/controller.rb#137
  def typed_query(on: T.unsafe(nil), schema: T.unsafe(nil), **kwargs, &_arg3); end

  # source://typed_params//lib/typed_params/controller.rb#160
  def typed_schema(key, namespace: T.unsafe(nil), **kwargs, &_arg3); end

  private

  # source://typed_params//lib/typed_params/controller.rb#169
  def method_added(method_name); end
end

# source://typed_params//lib/typed_params/formatters/formatter.rb#4
module TypedParams::Formatters
  # source://typed_params//lib/typed_params/formatters.rb#7
  def formats; end

  class << self
    # source://typed_params//lib/typed_params/formatters.rb#18
    def [](format); end

    # source://typed_params//lib/typed_params/formatters.rb#7
    def formats; end

    # @raise [ArgumentError]
    #
    # source://typed_params//lib/typed_params/formatters.rb#9
    def register(format, transform:, decorate: T.unsafe(nil)); end

    # source://typed_params//lib/typed_params/formatters.rb#16
    def unregister(type); end
  end
end

# source://typed_params//lib/typed_params/formatters/formatter.rb#5
class TypedParams::Formatters::Formatter
  # @return [Formatter] a new instance of Formatter
  #
  # source://typed_params//lib/typed_params/formatters/formatter.rb#9
  def initialize(format, transform:, decorate:); end

  # source://typed_params//lib/typed_params/formatters/formatter.rb#17
  def arity(*_arg0, **_arg1, &_arg2); end

  # source://typed_params//lib/typed_params/formatters/formatter.rb#17
  def call(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute decorator.
  #
  # source://typed_params//lib/typed_params/formatters/formatter.rb#6
  def decorator; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/formatters/formatter.rb#15
  def decorator?; end

  # Returns the value of attribute format.
  #
  # source://typed_params//lib/typed_params/formatters/formatter.rb#6
  def format; end

  # source://typed_params//lib/typed_params/formatters/formatter.rb#17
  def parameters(*_arg0, **_arg1, &_arg2); end
end

# source://typed_params//lib/typed_params/formatters/jsonapi.rb#34
module TypedParams::Formatters::JSONAPI
  class << self
    # source://typed_params//lib/typed_params/formatters/jsonapi.rb#35
    def call(params, schema:); end

    # source://typed_params//lib/typed_params/formatters/jsonapi.rb#52
    def format_array_data(data, schema:); end

    # source://typed_params//lib/typed_params/formatters/jsonapi.rb#60
    def format_hash_data(data, schema:); end
  end
end

# The Rails formatter wraps the params in a key matching the current
# controller's name.
#
# For example, in a UsersController context, given the params:
#
#   { email: 'foo@bar.example' }
#
# The final params would become:
#
#   { user: { email: 'foo@bar.example' } }
#
# source://typed_params//lib/typed_params/formatters/rails.rb#19
module TypedParams::Formatters::Rails
  class << self
    # source://typed_params//lib/typed_params/formatters/rails.rb#20
    def call(params, controller:); end
  end
end

# source://typed_params//lib/typed_params/handler.rb#4
class TypedParams::Handler
  # @return [Handler] a new instance of Handler
  #
  # source://typed_params//lib/typed_params/handler.rb#10
  def initialize(for:, schema:, action: T.unsafe(nil), format: T.unsafe(nil)); end

  # Returns the value of attribute action.
  #
  # source://typed_params//lib/typed_params/handler.rb#5
  def action; end

  # @raise [ArgumentError]
  #
  # source://typed_params//lib/typed_params/handler.rb#17
  def action=(action); end

  # Returns the value of attribute for.
  #
  # source://typed_params//lib/typed_params/handler.rb#5
  def for; end

  # Returns the value of attribute format.
  #
  # source://typed_params//lib/typed_params/handler.rb#5
  def format; end

  # Returns the value of attribute schema.
  #
  # source://typed_params//lib/typed_params/handler.rb#5
  def schema; end
end

# source://typed_params//lib/typed_params/handler_set.rb#6
class TypedParams::HandlerSet
  # @return [HandlerSet] a new instance of HandlerSet
  #
  # source://typed_params//lib/typed_params/handler_set.rb#11
  def initialize; end

  # Returns the value of attribute deferred.
  #
  # source://typed_params//lib/typed_params/handler_set.rb#7
  def deferred; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/handler_set.rb#17
  def deferred?; end

  # Returns the value of attribute params.
  #
  # source://typed_params//lib/typed_params/handler_set.rb#7
  def params; end

  # Returns the value of attribute query.
  #
  # source://typed_params//lib/typed_params/handler_set.rb#7
  def query; end
end

# source://typed_params//lib/typed_params.rb#60
class TypedParams::InvalidMethodError < ::StandardError; end

# source://typed_params//lib/typed_params.rb#64
class TypedParams::InvalidParameterError < ::StandardError
  # @return [InvalidParameterError] a new instance of InvalidParameterError
  #
  # source://typed_params//lib/typed_params.rb#68
  def initialize(message, source:, path:); end

  # source://typed_params//lib/typed_params.rb#75
  def inspect; end

  # Returns the value of attribute path.
  #
  # source://typed_params//lib/typed_params.rb#65
  def path; end

  # Returns the value of attribute source.
  #
  # source://typed_params//lib/typed_params.rb#65
  def source; end
end

# source://typed_params//lib/typed_params/mapper.rb#4
class TypedParams::Mapper
  # @return [Mapper] a new instance of Mapper
  #
  # source://typed_params//lib/typed_params/mapper.rb#5
  def initialize(schema:, controller: T.unsafe(nil)); end

  # @raise [NotImplementedError]
  #
  # source://typed_params//lib/typed_params/mapper.rb#10
  def call(*_arg0, &_arg1); end

  private

  # Returns the value of attribute controller.
  #
  # source://typed_params//lib/typed_params/mapper.rb#18
  def controller; end

  # depth_first_map performs a postorder DFS-like traversal algorithm
  # over the params. A postorder DFS starts at the leftmost leaf, and
  # works its way through to the rightmost sibling, then it backtracks
  # to the parent node and performs the same all the way up the tree
  # until it reaches the root.
  #
  # The algorithm is used to perform bouncing, coercing, validations
  # and transforms. For example, with transforms, this ensures that
  # the node's children are transformed before the parent.
  #
  # Visualized, the traversal algorithm would look like this:
  #
  #                  ┌───┐
  #                  │ 9 │
  #                  └─┬─┘
  #                    │
  #                  ┌─▼─┐
  #          ┌────┬──┤ 8 ├───────┐
  #          │    │  └─┬─┘       │
  #          │    │    │         │
  #        ┌─▼─┐┌─▼─┐┌─▼─┐     ┌─▼─┐
  #     ┌──┤ 3 ││ 4 ││ 6 │     │ 7 │
  #     │  └─┬─┘└───┘└─┬─┘     └───┘
  #     │    │         │
  #   ┌─▼─┐┌─▼─┐     ┌─▼─┐
  #   │ 1 ││ 2 │     │ 5 │
  #   └───┘└───┘     └───┘
  #
  # @yield [param]
  #
  # source://typed_params//lib/typed_params/mapper.rb#50
  def depth_first_map(param, &block); end

  # Returns the value of attribute schema.
  #
  # source://typed_params//lib/typed_params/mapper.rb#18
  def schema; end

  class << self
    # source://typed_params//lib/typed_params/mapper.rb#12
    def call(*args, **kwargs, &block); end
  end
end

# source://typed_params//lib/typed_params/memoize.rb#4
module TypedParams::Memoize
  mixes_in_class_methods ::TypedParams::Memoize::ClassMethods

  class << self
    # @private
    #
    # source://typed_params//lib/typed_params/memoize.rb#5
    def included(klass); end
  end
end

# source://typed_params//lib/typed_params/memoize.rb#7
module TypedParams::Memoize::ClassMethods
  # source://typed_params//lib/typed_params/memoize.rb#10
  def memoize; end

  # source://typed_params//lib/typed_params/memoize.rb#8
  def memoize_queue; end

  # source://typed_params//lib/typed_params/memoize.rb#8
  def memoize_queue=(val); end

  private

  # source://typed_params//lib/typed_params/memoize.rb#60
  def method_added(method_name); end

  # source://typed_params//lib/typed_params/memoize.rb#22
  def singleton_method_added(method_name); end

  class << self
    # source://typed_params//lib/typed_params/memoize.rb#8
    def memoize_queue; end

    # source://typed_params//lib/typed_params/memoize.rb#8
    def memoize_queue=(val); end
  end
end

# NamespacedSet is a set of key-values that are namespaced by a class.
# What makes this special is that access supports class inheritance.
# For example, given a Parent class and a Child class that inherits
# from Parent, the Child namespace can access the Parent namespace
# as long as a Child namespace doesn't also exist, in which case
# it will take precedence.
#
# For example, the above, codified:
#
#   class Parent; end
#   class Child < Parent; end
#
#   s = NamespacedSet.new
#   s[Parent, :foo] = :bar
#
#   s[Parent, :foo] => :bar
#   s[Child, :foo] => :bar
#
#   s[Child, :baz] = :qux
#
#   s[Parent, :baz] => nil
#   s[Child, :baz] => :qux
#
# source://typed_params//lib/typed_params/namespaced_set.rb#28
class TypedParams::NamespacedSet
  # @return [NamespacedSet] a new instance of NamespacedSet
  #
  # source://typed_params//lib/typed_params/namespaced_set.rb#29
  def initialize; end

  # source://typed_params//lib/typed_params/namespaced_set.rb#35
  def [](namespace, key); end

  # source://typed_params//lib/typed_params/namespaced_set.rb#31
  def []=(namespace, key, value); end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/namespaced_set.rb#45
  def exists?(namespace, key); end

  private

  # Returns the value of attribute store.
  #
  # source://typed_params//lib/typed_params/namespaced_set.rb#57
  def store; end
end

# source://typed_params//lib/typed_params/parameter.rb#6
class TypedParams::Parameter
  # @return [Parameter] a new instance of Parameter
  #
  # source://typed_params//lib/typed_params/parameter.rb#13
  def initialize(key:, value:, schema:, parent: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/parameter.rb#20
  def array?; end

  # source://typed_params//lib/typed_params/parameter.rb#101
  def deconstruct; end

  # source://typed_params//lib/typed_params/parameter.rb#100
  def deconstruct_keys(keys); end

  # @raise [NotImplementedError]
  #
  # source://typed_params//lib/typed_params/parameter.rb#51
  def delete; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/parameter.rb#31
  def has_key?(key); end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/parameter.rb#34
  def has_keys?(*keys); end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/parameter.rb#21
  def hash?; end

  # source://typed_params//lib/typed_params/parameter.rb#103
  def inspect; end

  # Returns the value of attribute key.
  #
  # source://typed_params//lib/typed_params/parameter.rb#7
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://typed_params//lib/typed_params/parameter.rb#7
  def key=(_arg0); end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/parameter.rb#31
  def key?(key); end

  # source://typed_params//lib/typed_params/parameter.rb#37
  def keys; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/parameter.rb#34
  def keys?(*keys); end

  # source://typed_params//lib/typed_params/parameter.rb#98
  def method_missing(method_name, *_arg1, **_arg2, &_arg3); end

  # Returns the value of attribute parent.
  #
  # source://typed_params//lib/typed_params/parameter.rb#10
  def parent; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/parameter.rb#23
  def parent?; end

  # source://typed_params//lib/typed_params/parameter.rb#25
  def path; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/parameter.rb#22
  def scalar?; end

  # Returns the value of attribute schema.
  #
  # source://typed_params//lib/typed_params/parameter.rb#10
  def schema; end

  # source://typed_params//lib/typed_params/parameter.rb#65
  def unwrap(formatter: T.unsafe(nil), controller: T.unsafe(nil)); end

  # Returns the value of attribute value.
  #
  # source://typed_params//lib/typed_params/parameter.rb#7
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://typed_params//lib/typed_params/parameter.rb#7
  def value=(_arg0); end

  private

  # Delegate everything else to the value
  #
  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/parameter.rb#97
  def respond_to_missing?(method_name, *_arg1, **_arg2, &_arg3); end
end

# source://typed_params//lib/typed_params/parameterizer.rb#4
class TypedParams::Parameterizer
  # @return [Parameterizer] a new instance of Parameterizer
  #
  # source://typed_params//lib/typed_params/parameterizer.rb#5
  def initialize(schema:, parent: T.unsafe(nil)); end

  # source://typed_params//lib/typed_params/parameterizer.rb#10
  def call(value:, key: T.unsafe(nil)); end

  private

  # source://typed_params//lib/typed_params/parameterizer.rb#33
  def parameterize_array_schema(key:, value:); end

  # source://typed_params//lib/typed_params/parameterizer.rb#58
  def parameterize_hash_schema(key:, value:); end

  # source://typed_params//lib/typed_params/parameterizer.rb#83
  def parameterize_value(key:, value:); end

  # Returns the value of attribute parent.
  #
  # source://typed_params//lib/typed_params/parameterizer.rb#30
  def parent; end

  # Returns the value of attribute schema.
  #
  # source://typed_params//lib/typed_params/parameterizer.rb#30
  def schema; end
end

# source://typed_params//lib/typed_params/path.rb#4
class TypedParams::Path
  # @return [Path] a new instance of Path
  #
  # source://typed_params//lib/typed_params/path.rb#7
  def initialize(*keys, casing: T.unsafe(nil)); end

  # source://typed_params//lib/typed_params/path.rb#28
  def inspect; end

  # Returns the value of attribute keys.
  #
  # source://typed_params//lib/typed_params/path.rb#5
  def keys; end

  # source://typed_params//lib/typed_params/path.rb#13
  def to_dot_notation; end

  # source://typed_params//lib/typed_params/path.rb#12
  def to_json_pointer; end

  # source://typed_params//lib/typed_params/path.rb#15
  def to_s; end

  private

  # Returns the value of attribute casing.
  #
  # source://typed_params//lib/typed_params/path.rb#34
  def casing; end

  # source://typed_params//lib/typed_params/path.rb#51
  def transform_key(key); end

  # source://typed_params//lib/typed_params/path.rb#36
  def transform_string(str); end
end

# source://typed_params//lib/typed_params/pipeline.rb#4
class TypedParams::Pipeline
  # @return [Pipeline] a new instance of Pipeline
  #
  # source://typed_params//lib/typed_params/pipeline.rb#5
  def initialize; end

  # source://typed_params//lib/typed_params/pipeline.rb#6
  def <<(step); end

  # source://typed_params//lib/typed_params/pipeline.rb#7
  def call(params); end

  private

  # Returns the value of attribute steps.
  #
  # source://typed_params//lib/typed_params/pipeline.rb#11
  def steps; end
end

# source://typed_params//lib/typed_params/processor.rb#4
class TypedParams::Processor
  # @return [Processor] a new instance of Processor
  #
  # source://typed_params//lib/typed_params/processor.rb#5
  def initialize(schema:, controller: T.unsafe(nil)); end

  # source://typed_params//lib/typed_params/processor.rb#10
  def call(value); end

  private

  # Returns the value of attribute controller.
  #
  # source://typed_params//lib/typed_params/processor.rb#24
  def controller; end

  # Returns the value of attribute schema.
  #
  # source://typed_params//lib/typed_params/processor.rb#24
  def schema; end
end

# Sentinel value for determining if something is the root. For
# example, determining if a schema is the root node.
#
# source://typed_params//lib/typed_params.rb#57
TypedParams::ROOT = T.let(T.unsafe(nil), Object)

# source://typed_params//lib/typed_params/schema.rb#4
class TypedParams::Schema
  # @raise [ArgumentError]
  # @return [Schema] a new instance of Schema
  #
  # source://typed_params//lib/typed_params/schema.rb#18
  def initialize(controller: T.unsafe(nil), source: T.unsafe(nil), strict: T.unsafe(nil), parent: T.unsafe(nil), type: T.unsafe(nil), key: T.unsafe(nil), optional: T.unsafe(nil), coerce: T.unsafe(nil), polymorphic: T.unsafe(nil), allow_blank: T.unsafe(nil), allow_nil: T.unsafe(nil), allow_non_scalars: T.unsafe(nil), nilify_blanks: T.unsafe(nil), noop: T.unsafe(nil), inclusion: T.unsafe(nil), exclusion: T.unsafe(nil), format: T.unsafe(nil), length: T.unsafe(nil), transform: T.unsafe(nil), validate: T.unsafe(nil), if: T.unsafe(nil), unless: T.unsafe(nil), as: T.unsafe(nil), alias: T.unsafe(nil), casing: T.unsafe(nil), &block); end

  # Returns the value of attribute alias.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def alias; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#273
  def aliased?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#274
  def allow_blank?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#275
  def allow_nil?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#276
  def allow_non_scalars?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#282
  def array?; end

  # Returns the value of attribute as.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def as; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#265
  def child?; end

  # Returns the value of attribute children.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def children; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#266
  def children?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#271
  def coerce?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#278
  def endless?; end

  # format defines the final output format for the schema, transforming
  # the params from an input format to an output format, e.g. a JSONAPI
  # document to Rails' standard params format. This also applies the
  # formatter's decorators onto the controller.
  #
  # @raise [NotImplementedError]
  #
  # source://typed_params//lib/typed_params/schema.rb#166
  def format(format); end

  # Returns the value of attribute formatter.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def formatter; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#285
  def formatter?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#283
  def hash?; end

  # Returns the value of attribute if.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def if; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#280
  def if?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#279
  def indexed?; end

  # source://typed_params//lib/typed_params/schema.rb#287
  def inspect; end

  # item defines an indexed parameter for an array schema.
  #
  # @raise [NotImplementedError]
  #
  # source://typed_params//lib/typed_params/schema.rb#226
  def item(key = T.unsafe(nil), type:, **kwargs, &block); end

  # items defines a set of like-parameters for an array schema.
  #
  # source://typed_params//lib/typed_params/schema.rb#238
  def items(**kwargs, &_arg1); end

  # Returns the value of attribute key.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def key; end

  # source://typed_params//lib/typed_params/schema.rb#250
  def keys; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#268
  def lenient?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#277
  def nilify_blanks?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#269
  def optional?; end

  # param defines a keyed parameter for a hash schema.
  #
  # @raise [NotImplementedError]
  #
  # source://typed_params//lib/typed_params/schema.rb#210
  def param(key, type:, **kwargs, &block); end

  # params defines multiple like-parameters for a hash schema.
  #
  # source://typed_params//lib/typed_params/schema.rb#222
  def params(*keys, **kwargs, &block); end

  # Returns the value of attribute parent.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def parent; end

  # source://typed_params//lib/typed_params/schema.rb#244
  def path; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#272
  def polymorphic?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#270
  def required?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#264
  def root?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#284
  def scalar?; end

  # Returns the value of attribute source.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def source; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#267
  def strict?; end

  # Returns the value of attribute transforms.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def transforms; end

  # Returns the value of attribute type.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def type; end

  # Returns the value of attribute unless.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def unless; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/schema.rb#281
  def unless?; end

  # Returns the value of attribute validations.
  #
  # source://typed_params//lib/typed_params/schema.rb#5
  def validations; end

  # with defines a set of options to use for all direct children of the
  # schema defined within the block.
  #
  # For example, it can be used to define a common guard:
  #
  #   with if: -> { ... } do
  #     param :foo, type: :string
  #     param :bar, type: :string
  #     param :baz, type: :hash do
  #       param :qux, type: :string
  #     end
  #   end
  #
  # In this example, :foo, :bar, and :baz will inherit the if: guard,
  # but :qux will not, since it is not a direct child.
  #
  # source://typed_params//lib/typed_params/schema.rb#199
  def with(**kwargs, &_arg1); end

  private

  # Returns the value of attribute casing.
  #
  # source://typed_params//lib/typed_params/schema.rb#293
  def casing; end

  # Returns the value of attribute controller.
  #
  # source://typed_params//lib/typed_params/schema.rb#293
  def controller; end

  # source://typed_params//lib/typed_params/schema.rb#298
  def endless!; end

  # Returns the value of attribute options.
  #
  # source://typed_params//lib/typed_params/schema.rb#293
  def options; end

  # Returns the value of attribute strict.
  #
  # source://typed_params//lib/typed_params/schema.rb#293
  def strict; end
end

# source://typed_params//lib/typed_params/schema_set.rb#6
class TypedParams::SchemaSet < ::TypedParams::NamespacedSet; end

# source://typed_params//lib/typed_params/transformer.rb#6
class TypedParams::Transformer < ::TypedParams::Mapper
  # source://typed_params//lib/typed_params/transformer.rb#7
  def call(params); end
end

# source://typed_params//lib/typed_params/transforms/transform.rb#4
module TypedParams::Transforms; end

# source://typed_params//lib/typed_params/transforms/key_alias.rb#7
class TypedParams::Transforms::KeyAlias < ::TypedParams::Transforms::Transform
  # @return [KeyAlias] a new instance of KeyAlias
  #
  # source://typed_params//lib/typed_params/transforms/key_alias.rb#8
  def initialize(as); end

  # source://typed_params//lib/typed_params/transforms/key_alias.rb#9
  def call(_, value); end

  private

  # Returns the value of attribute as.
  #
  # source://typed_params//lib/typed_params/transforms/key_alias.rb#13
  def as; end
end

# source://typed_params//lib/typed_params/transforms/key_casing.rb#7
class TypedParams::Transforms::KeyCasing < ::TypedParams::Transforms::Transform
  # @return [KeyCasing] a new instance of KeyCasing
  #
  # source://typed_params//lib/typed_params/transforms/key_casing.rb#8
  def initialize(casing); end

  # source://typed_params//lib/typed_params/transforms/key_casing.rb#10
  def call(key, value); end

  private

  # Returns the value of attribute casing.
  #
  # source://typed_params//lib/typed_params/transforms/key_casing.rb#19
  def casing; end

  # source://typed_params//lib/typed_params/transforms/key_casing.rb#36
  def transform_key(key); end

  # source://typed_params//lib/typed_params/transforms/key_casing.rb#21
  def transform_string(str); end

  # source://typed_params//lib/typed_params/transforms/key_casing.rb#47
  def transform_value(value); end
end

# source://typed_params//lib/typed_params/transforms/nilify_blanks.rb#7
class TypedParams::Transforms::NilifyBlanks < ::TypedParams::Transforms::Transform
  # source://typed_params//lib/typed_params/transforms/nilify_blanks.rb#8
  def call(key, value); end
end

# source://typed_params//lib/typed_params/transforms/noop.rb#7
class TypedParams::Transforms::Noop < ::TypedParams::Transforms::Transform
  # source://typed_params//lib/typed_params/transforms/noop.rb#8
  def call(*_arg0); end
end

# source://typed_params//lib/typed_params/transforms/transform.rb#5
class TypedParams::Transforms::Transform
  # @raise [NotImplementedError]
  #
  # source://typed_params//lib/typed_params/transforms/transform.rb#6
  def call(key, value); end

  class << self
    # source://typed_params//lib/typed_params/transforms/transform.rb#8
    def wrap(fn); end
  end
end

# source://typed_params//lib/typed_params/types/type.rb#4
module TypedParams::Types
  # source://typed_params//lib/typed_params/types.rb#8
  def abstracts; end

  # source://typed_params//lib/typed_params/types.rb#7
  def registry; end

  # source://typed_params//lib/typed_params/types.rb#9
  def subtypes; end

  # source://typed_params//lib/typed_params/types.rb#10
  def types; end

  class << self
    # @raise [ArgumentError]
    #
    # source://typed_params//lib/typed_params/types.rb#48
    def [](key); end

    # source://typed_params//lib/typed_params/types.rb#8
    def abstracts; end

    # @return [Boolean]
    #
    # source://typed_params//lib/typed_params/types.rb#43
    def array?(value); end

    # source://typed_params//lib/typed_params/types.rb#41
    def coerce(value, to:); end

    # @raise [ArgumentError]
    #
    # source://typed_params//lib/typed_params/types.rb#59
    def for(value, try: T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://typed_params//lib/typed_params/types.rb#44
    def hash?(value); end

    # @return [Boolean]
    #
    # source://typed_params//lib/typed_params/types.rb#45
    def nil?(value); end

    # @raise [ArgumentError]
    #
    # source://typed_params//lib/typed_params/types.rb#12
    def register(type, match:, name: T.unsafe(nil), coerce: T.unsafe(nil), archetype: T.unsafe(nil), abstract: T.unsafe(nil), scalar: T.unsafe(nil), accepts_block: T.unsafe(nil)); end

    # source://typed_params//lib/typed_params/types.rb#7
    def registry; end

    # @return [Boolean]
    #
    # source://typed_params//lib/typed_params/types.rb#46
    def scalar?(value); end

    # source://typed_params//lib/typed_params/types.rb#9
    def subtypes; end

    # source://typed_params//lib/typed_params/types.rb#10
    def types; end

    # source://typed_params//lib/typed_params/types.rb#29
    def unregister(type); end
  end
end

# source://typed_params//lib/typed_params/types/boolean.rb#5
module TypedParams::Types::Boolean; end

# source://typed_params//lib/typed_params/types/boolean.rb#6
TypedParams::Types::Boolean::COERCIBLE_TYPES = T.let(T.unsafe(nil), Array)

# source://typed_params//lib/typed_params/types/boolean.rb#7
TypedParams::Types::Boolean::TRUTHY_VALUES = T.let(T.unsafe(nil), Array)

# source://typed_params//lib/typed_params/types/type.rb#5
class TypedParams::Types::Type
  # @raise [ArgumentError]
  # @return [Type] a new instance of Type
  #
  # source://typed_params//lib/typed_params/types/type.rb#9
  def initialize(type:, name:, match:, coerce:, scalar:, abstract:, archetype:, accepts_block:); end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/types/type.rb#44
  def abstract?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/types/type.rb#41
  def accepts_block?; end

  # source://typed_params//lib/typed_params/types/type.rb#32
  def archetype; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/types/type.rb#42
  def coercable?; end

  # source://typed_params//lib/typed_params/types/type.rb#68
  def coerce(value); end

  # source://typed_params//lib/typed_params/types/type.rb#53
  def humanize; end

  # source://typed_params//lib/typed_params/types/type.rb#64
  def inspect; end

  # NOTE(ezekg) Using yoda-style self#== because value may be a Type, and
  #             we're overriding Type#coerce, which is a Ruby core method
  #             expected to return an [x, y] tuple, so v == self breaks.
  #
  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/types/type.rb#50
  def match?(v); end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/types/type.rb#51
  def mismatch?(v); end

  # Returns the value of attribute name.
  #
  # source://typed_params//lib/typed_params/types/type.rb#6
  def name; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/types/type.rb#43
  def scalar?; end

  # @return [Boolean]
  #
  # source://typed_params//lib/typed_params/types/type.rb#45
  def subtype?; end

  # source://typed_params//lib/typed_params/types/type.rb#62
  def to_s; end

  # source://typed_params//lib/typed_params/types/type.rb#61
  def to_sym; end

  # Returns the value of attribute type.
  #
  # source://typed_params//lib/typed_params/types/type.rb#6
  def type; end
end

# source://typed_params//lib/typed_params.rb#59
class TypedParams::UndefinedActionError < ::StandardError; end

# source://typed_params//lib/typed_params.rb#80
class TypedParams::UnpermittedParameterError < ::TypedParams::InvalidParameterError; end

# source://typed_params//lib/typed_params.rb#61
class TypedParams::ValidationError < ::StandardError; end

# source://typed_params//lib/typed_params/validations/validation.rb#4
module TypedParams::Validations; end

# source://typed_params//lib/typed_params/validations/exclusion.rb#7
class TypedParams::Validations::Exclusion < ::TypedParams::Validations::Validation
  # @raise [ValidationError]
  #
  # source://typed_params//lib/typed_params/validations/exclusion.rb#8
  def call(value); end
end

# source://typed_params//lib/typed_params/validations/format.rb#7
class TypedParams::Validations::Format < ::TypedParams::Validations::Validation
  # @raise [ValidationError]
  #
  # source://typed_params//lib/typed_params/validations/format.rb#8
  def call(value); end
end

# source://typed_params//lib/typed_params/validations/inclusion.rb#7
class TypedParams::Validations::Inclusion < ::TypedParams::Validations::Validation
  # @raise [ValidationError]
  #
  # source://typed_params//lib/typed_params/validations/inclusion.rb#8
  def call(value); end
end

# source://typed_params//lib/typed_params/validations/length.rb#7
class TypedParams::Validations::Length < ::TypedParams::Validations::Validation
  # source://typed_params//lib/typed_params/validations/length.rb#8
  def call(value); end
end

# source://typed_params//lib/typed_params/validations/validation.rb#5
class TypedParams::Validations::Validation
  # @return [Validation] a new instance of Validation
  #
  # source://typed_params//lib/typed_params/validations/validation.rb#6
  def initialize(options); end

  # @raise [NotImplementedError]
  #
  # source://typed_params//lib/typed_params/validations/validation.rb#7
  def call(value); end

  private

  # Returns the value of attribute options.
  #
  # source://typed_params//lib/typed_params/validations/validation.rb#15
  def options; end

  class << self
    # source://typed_params//lib/typed_params/validations/validation.rb#9
    def wrap(fn); end
  end
end

# source://typed_params//lib/typed_params/validator.rb#6
class TypedParams::Validator < ::TypedParams::Mapper
  # @raise [InvalidParameterError]
  #
  # source://typed_params//lib/typed_params/validator.rb#7
  def call(params); end
end
