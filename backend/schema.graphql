type Category {
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  slug: String!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Category.
"""
type CategoryConnection {
  """
  A list of edges.
  """
  edges: [CategoryEdge]

  """
  A list of nodes.
  """
  nodes: [Category]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  recordCount: Int
}

"""
Autogenerated input type of CategoryCreate
"""
input CategoryCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
  recipeIds: [ID!]
}

"""
Autogenerated return type of CategoryCreate.
"""
type CategoryCreatePayload {
  category: Category

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
Autogenerated input type of CategoryDelete
"""
input CategoryDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of CategoryDelete.
"""
type CategoryDeletePayload {
  category: Category!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
An edge in a connection.
"""
type CategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Category
}

"""
Autogenerated input type of CategoryUpdate
"""
input CategoryUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  name: String!
}

"""
Autogenerated return type of CategoryUpdate.
"""
type CategoryUpdatePayload {
  category: Category!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Ingredient {
  createdAt: ISO8601DateTime!
  id: ID!
  title: String!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Ingredient.
"""
type IngredientConnection {
  """
  A list of edges.
  """
  edges: [IngredientEdge]

  """
  A list of nodes.
  """
  nodes: [Ingredient]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  recordCount: Int
}

"""
An edge in a connection.
"""
type IngredientEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Ingredient
}

type Mutation {
  """
  Creates a category. Optionally, you can pass an array of recipe IDs to associate with the category.
  """
  categoryCreate(
    """
    Parameters for CategoryCreate
    """
    input: CategoryCreateInput!
  ): CategoryCreatePayload

  """
  Deletes a category by ID
  """
  categoryDelete(
    """
    Parameters for CategoryDelete
    """
    input: CategoryDeleteInput!
  ): CategoryDeletePayload

  """
  Updates a category's name by id
  """
  categoryUpdate(
    """
    Parameters for CategoryUpdate
    """
    input: CategoryUpdateInput!
  ): CategoryUpdatePayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  categories(page: Int! = 1): [Category!]!
  category(id: ID!): Category!
  ingredient(id: ID!): Ingredient!
  ingredients(page: Int! = 1): [Ingredient!]!
  recipe(id: ID!): Recipe!
  recipesConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    ids: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): RecipeConnection!
}

type Recipe {
  author: String
  categories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CategoryConnection
  cookTimeMinutes: Int
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  imageUrl: String
  ingredients(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IngredientConnection
  preTimeMinutes: Int
  rating: Float
  slug: String!
  title: String!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Recipe.
"""
type RecipeConnection {
  """
  A list of edges.
  """
  edges: [RecipeEdge]

  """
  A list of nodes.
  """
  nodes: [Recipe]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  recordCount: Int
}

"""
An edge in a connection.
"""
type RecipeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Recipe
}
